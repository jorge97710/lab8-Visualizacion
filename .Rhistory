clasificiacion ~ AÑO + MES + SEXO + GRUPETNICO + EDAD + PERIODOEDA  + Temporada,
data = input.dat)
gc()
head(todo)
todo <- todo[,-1]
head(todo)
todo <- todo[,-1]
todo <- todo[,-1]
head(todo)
head(todo)
todo <- todo[,-9]
head(todo)
scaleddata<-scale(todo)
scaleddata
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize
maxmindf <- as.data.frame(lapply(todo, normalize))
maxmindf
1830054*.7
# Training and Test Data
trainset <- maxmindf[1:1281038, ]
testset <- maxmindf[1281039:1830054, ]
library(neuralnet)
nn <- neuralnet(Clasifiacion ~Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn <- neuralnet(clasifiacion ~Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn <- neuralnet(clasificiacion ~Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn$result.matrix
plot(nn)
#Test the resulting output
temp_test <- subset(testset, select = c("Temporada"))
head(temp_test)
nn.results <- compute(nn, temp_test)
results <- data.frame(actual = testset$clasificiacion, prediction = nn.results$net.result)
nn.results
roundedresults<-sapply(results,round,digits=0)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
table(actual,prediction)
roundedresults<-sapply(results,round,digits=3)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
attach(roundedresultsdf)
table(actual,prediction)
predicted=results$prediction * abs(diff(range(clasificiacion))) + min(clasificiacion)
roundedresults<-sapply(results,round,digits=4)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
#Test the resulting output
temp_test <- subset(testset, select = c("Temporada"))
head(temp_test)
temp_test
nn.results <- compute(nn, temp_test)
nn.results
results <- data.frame(actual = testset$clasificiacion, prediction = nn.results$net.result)
results
nn <- neuralnet(clasificiacion ~AÑO + MES + SEXO + GRUPETNICO + EDAD + PERIODOEDA  + Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
# Read the Data
data = read.csv("estudioenfermedad.csv", header=T)
# Random sampling
samplesize = 0.70 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
# Create training and test set
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
data<- data[-1,]
# Read the Data
data = read.csv("estudioenfermedad.csv", header=T)
data<- data[-1,]
data<- data[-1,]
data<- data[-1,]
# Read the Data
data = read.csv("estudioenfermedad.csv", header=T)
data<- data[,-1]
data<- data[,-1]
data<- data[,-1]
View(data)
data<- data[,-9]
samplesize = 0.70 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
# Create training and test set
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
scaled
# load library
library(neuralnet)
# creating training and test set
trainNN = scaled[index , ]
testNN = scaled[-index , ]
# fit neural network
set.seed(2)
NN = neuralnet(clasificiacion ~ AÑO+MES+SEXO+GRUPETNICO+EDAD+PERIODOEDA+Temporada, trainNN, hidden = 3 , linear.output = T )
NN = neuralnet(clasificiacion ~ AÑO+MES+SEXO+GRUPETNICO+EDAD+PERIODOEDA+Temporada, trainNN, hidden = 3 , linear.output = T,verbose=True)
NN = neuralnet(clasificiacion ~ Temporada, trainNN, hidden = 3 , linear.output = T)
# plot neural network
plot(NN)
NN = neuralnet(clasificiacion ~ AÑO+Temporada, trainNN, hidden = 3 , linear.output = T)
NN = neuralnet(clasificiacion ~ MES+Temporada, trainNN, hidden = 3 , linear.output = T)
# Random sampling
samplesize = 0.95 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
# Create training and test set
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
# creating training and test set
trainNN = scaled[index , ]
testNN = scaled[-index , ]
# fit neural network
set.seed(2)
NN = neuralnet(clasificiacion ~ MES+Temporada, testNN, hidden = 3 , linear.output = T)
todo <- read.csv("estudioenfermedad.csv")
cor(todo$clasificiacion,todo$Temporada,method="spearman")
plot(todo$Temporada,todo$clasificiacion)
prueba = lm(clasificiacion ~ Temporada, data=todo)
summary(prueba)
gc()
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
library(data.table)
mydat <- fread('http://www.stats.ox.ac.uk/pub/datasets/csb/ch11b.dat')
head(mydat)
mydat <- fread('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
install.packages("curl")
mydat <- fread('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
head(mydat)
library(data.table)
library(RCurl)
install.packages("RCurl")
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/
.csv', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/.csv', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
library(RCurl)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
read.table.url("https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/",skip=4,header=T)
##prueba imagenes
getwd()
library(imager)
install.packages("imager")
library(imager)
plot(boats)
grayscale(boats)
plot(grayscale(boats))
dim(boats)
plot(boats)
dim(boats)
resize(boats,size_x=10,size_y=10)
plot(resize(boats,size_x=10,size_y=10))
plot(resize(boats,size_x=100,size_y=100))
gr <- imgradient(boats.g,"xy")
gr
plot(gr,layout="row")
gr <- imgradient(boats.g,"xy")
boats
boats.g
gr <- imgradient(boats,"xy")
gr
plot(gr,layout="row")
dx <- imgradient(boats,"x")
dy <- imgradient(boats,"y")
grad.mag <- sqrt(dx^2+dy^2)
plot(grad.mag,main="Gradient magnitude")
imgradient(boats.g,"xy") %>% enorm %>% plot(main="Gradient magnitude (again)")
imgradient(boats,"xy") %>% enorm %>% plot(main="Gradient magnitude (again)")
gr <- imgradient(grayscale(boats),"xy")
gr
plot(gr,layout="row")
dx <- imgradient(grayscale(boats),"x")
dy <- imgradient(grayscale(boats),"y")
grad.mag <- sqrt(dx^2+dy^2)
plot(grad.mag,main="Gradient magnitude")
imgradient(boats,"xy") %>% enorm %>% plot(main="Gradient magnitude (again)")
boats
# Convert the 3D array to a matrix of #rrggbb values
img <-grayscale(boats)
img
img <- as.raster(img)
# Create a count table
tab <- table(img)
# Convert to a data.frame
tab <- data.frame(Color = names(tab), Count = as.integer(tab))
# Extract red/green/blue values
RGB <- t(col2rgb(tab$Color))
tab <- cbind(tab, RGB)
# Preview
head(tab)
##pp
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
library("EBImage")
install.packages("EBImage")
as.data.frame(boats)
as.data.frame(boats,wwide = "c")
as.data.frame(boats,wide = "c")
as.data.frame(grayscale(boats),wide = "c")
grayscale(boats)
plot(grayscale(boats))
as.data.frame(grayscale(boats),wide = "c")
plot(grayscale(boats))
imgradient(grayscale(boats),"xy") %>% enorm %>% plot(main="Gradient magnitude (again)")
as.data.frame(imgradient(grayscale(boats),"xy") %>% enorm %>% plot(main="Gradient magnitude (again)")
,wide = "c")
plot(resize(boats,size_x=100,size_y=100))
plot(resize(boats,size_x=10,size_y=10))
plot(resize(grayscale(boats),size_x=10,size_y=10))
imgradient(resize(grayscale(boats),size_x=10,size_y=10),"xy") %>% enorm %>% plot(main="Gradient magnitude (again)")
as.data.frame(imgradient(resize(grayscale(boats),size_x=10,size_y=10),"xy") %>% enorm %>% plot(main="Gradient magnitude (again)")
,wide = "c")
imgradient(resize(grayscale(boats),size_x=2,size_y=2),"xy") %>% enorm %>% plot(main="Gradient magnitude (again)")
as.data.frame(imgradient(resize(grayscale(boats),size_x=2,size_y=2),"xy") %>% enorm %>% plot(main="Gradient magnitude (again)")
,wide = "c")
as.data.frame(imgradient(grayscale(boats),"xy") %>% enorm %>% plot(main="Gradient magnitude (again)")
,wide = "c")
getwd()
fpath <- system.file('c:Users/jazmi/OneDrive/Documentos/original3_figura2.jpg',package='imager')
parrots <- load.image(fpath)
fpath <- system.file('c:Users/jazmi/OneDrive/Documentos/original3_figura2.jpg',package='imager')
parrots <- load.image(fpath)
plot(parrots)
fpath
fpath
fpath <- system.file('c:Users/jazmi/OneDrive/Documentos/original3_figura2.jpg',package='imager')
fpath
fpath <- system.file('c:Users/jazmi/OneDrive/Documentos/original3_figura2.jpg',package='imager')
parrots <- load.image(fpath)
fpath <- system.file('c:Users/jazmi/OneDrive/Documentos/foto.PNG',package='imager')
parrots <- load.image(fpath)
fpath
fpath <- system.file('c:Users/jazmi/OneDrive/Documentos/foto.PNG',package='imager')
setwd("C:/Users/jazmi/OneDrive/Documentos/GitHub/proyecto-libre-jazmitia_point_of_view_old/lab8-Visualizacion")
library(ggplot2)
library(ggplot2)
library(ggpubr)
#segunda manera de cargar la data, yo cambie todas las | por , pero se puede hacer por cualquier manera cambiando sep.
data_2016 <- read.table("2016.txt", sep="|", header=TRUE, row.names=NULL)
data_2017 <- read.table("2017.txt", sep="|", header=TRUE, row.names=NULL)
data_2018 <- read.table("2018.txt", sep="|", header=TRUE, row.names=NULL)
data_2019 <- read.table("2019.txt", sep="|", header=TRUE, row.names=NULL)
datos <- rbind(data_2017, data_2018, data_2019, data_2016)
summary(datos)
hist(data_2016$Fecha.de.la.Poliza)
hist(data_2016$Fecha.de.la.Poliza,main = "Partida de Aranceleria",xlab= "Partida", ylab="Frecuencia" )
hist(datos$Partida.Arancelaria,main = "Modelo del Vehiculo",xlab= "aÃ±o de modelo", ylab="Frecuencia" ,xlim=c(1980,2020))
hist(datos$Linea ,main = "Centimetros Cubicos",xlab= "centrimetros cubicos", ylab="Frecuencia" ,xlim=c(0,11000))
hist(datos$Asientos ,main = "numero de puertas",xlab= "numero de puertas", ylab="Frecuencia" ,xlim=c(0,7), ylim=c(0,100000))
hist(datos$Tonelaje ,main = "Tonelaje",xlab= "cantidad de tonelaje", ylab="Frecuencia" ,xlim=c(0,1900000), ylim=c(0,100000))
hist(datos$Valor.CIF ,main = "Impuesto",xlab= "cantidad de impuesto", ylab="Frecuencia" ,xlim=c(0,199900), ylim=c(0,100000))
mytable <- table(datos$row.names)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Pais de Proveniencia")
pie(mytable, labels = lbls,
main="Pais de Proveniencia")
##--------------------------------------
treeMapCoordinates <- treemapify(mytable,
area = "value",
fill = "parent",
label = "id",
group = "parent")
##--------------------------------------
library(treemapify)
install.packages("treeamplify")
treeMapCoordinates <- treemapify(mytable,
area = "value",
fill = "parent",
label = "id",
group = "parent")
##--------------------------------------
library(treemapify)
counts <- table(datos$row.names)
barplot(counts, main="Pais de Proveniencia",
xlab="Pais de Proveniencia", col=brewer.pal(n = 3, name = "RdBu"))
counts <- table(datos$row.names)
barplot(counts, main="Pais de Proveniencia",
xlab="Pais de Proveniencia", col=brewer.pal(n = 3, name = "RdBu"))
mytable <- table(datos$Pais.de.Proveniencia)
mytable <- table(datos$Pais.de.Proveniencia)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Aduana de ingreso")
mytable
mytable <- table(datos$row.names)
mytable
View(mytable)
barplot(height=mytable$Freq, names=mytable$Var1, col="#69b3a2", horiz=T , las=1)
mytable[1]
mytable[1:]
mytable[1;]
datos$row.names
typeof(mytable)
mytable
library(tibble)
library(tibble)
enframe(mytable,name = "Var1",value="Freq")
prueba <-enframe(mytable,name = "Var1",value="Freq")
prueba
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2", horiz=T , las=1)
# Plot
ggplot(data, aes(x=prueba$Var1, y=prueba$Freq)) +
geom_point() +
geom_segment( aes(x=x, xend=x, y=0, yend=y))
# Plot
ggplot(prueba, aes(x=prueba$Var1, y=prueba$Freq)) +
geom_point() +
geom_segment( aes(x=x, xend=x, y=0, yend=y))
# Plot
ggplot(prueba, aes(x=prueba$Var1, y=prueba$Freq)) +
geom_point() +
geom_segment( aes(x=prueba$Var1, xend=prueba$Var1, y=0, yend=prueba$Freq))
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2", horiz=T , las=1)
gc()
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2 , las=2)
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2)
f
wf
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2)
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.axis = 1.5)
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=1.5)
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=1.5)
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
mytable <- table(datos$Pais.de.Proveniencia)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Aduana de ingreso")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
counts <- table(datos$Pais.de.Proveniencia)
barplot(counts, main="Aduana de ingreso",
xlab="Aduana de ingreso", col=brewer.pal(n = 3, name = "RdBu"))
mytable <- table(datos$Modelo.del.Vehiculo)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Marca")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
mytable <- table(datos$Centimetros.Cubicos)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Distintivo")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
mytable <- table(datos$Distintivo)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Tipo de vehiculo")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
mytable <- table(datos$Tipo.de.Vehiculo)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Tipo de importador")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
mytable <- table(datos$Tipo.de.Importador)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Tipo de Combustible")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
library(treemap)
install.packages("treemap")
library(treemap)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq")
counts <- table(datos$row.names)
barplot(counts, main="Pais de Proveniencia",
xlab="Pais de Proveniencia", col=brewer.pal(n = 3, name = "RdBu"))
mytable <- table(datos$Pais.de.Proveniencia)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Aduana de ingreso")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq")
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq")
mytable <- table(datos$row.names)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Pais de Proveniencia")
library(tibble)
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq")
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",        title ="Cantidad de importaciones segun pais",
)
counts <- table(datos$row.names)
barplot(counts, main="Pais de Proveniencia",
xlab="Pais de Proveniencia", col=brewer.pal(n = 3, name = "RdBu"))
mytable <- table(datos$Pais.de.Proveniencia)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Aduana de ingreso")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq")
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",title = "Cantidad de importaciones por aduana de ingreso")
counts <- table(datos$Pais.de.Proveniencia)
barplot(counts, main="Aduana de ingreso",
xlab="Aduana de ingreso", col=brewer.pal(n = 3, name = "RdBu"))
mytable <- table(datos$Modelo.del.Vehiculo)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Marca")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq")
mytable <- table(datos$Centimetros.Cubicos)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Distintivo")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq")
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",title = "distintivo")
mytable <- table(datos$Distintivo)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Tipo de vehiculo")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq")
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",title = "Tipo de vehiculo")
mytable <- table(datos$Tipo.de.Vehiculo)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Tipo de importador")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
pie(mytable, labels = lbls,
main="Tipo de importador")
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq")
mytable <- table(datos$Tipo.de.Importador)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Tipo de Combustible")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",title = "Tipo de combustible")
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq")
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",title = "Tipo de combustible")
mytable <- table(datos$row.names)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Pais de Proveniencia")
library(tibble)
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",        title ="Cantidad de importaciones segun pais",
)
counts <- table(datos$row.names)
barplot(counts, main="Pais de Proveniencia",
xlab="Pais de Proveniencia", col=brewer.pal(n = 3, name = "RdBu"))
mytable <- table(datos$Pais.de.Proveniencia)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Aduana de ingreso")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",title = "Cantidad de importaciones por aduana de ingreso")
counts <- table(datos$Pais.de.Proveniencia)
barplot(counts, main="Aduana de ingreso",
xlab="Aduana de ingreso", col=brewer.pal(n = 3, name = "RdBu"))
mytable <- table(datos$Modelo.del.Vehiculo)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Marca")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",title = "Marcas mas importadas")
mytable <- table(datos$Centimetros.Cubicos)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Distintivo")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",title = "distintivo")
mytable <- table(datos$Distintivo)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Tipo de vehiculo")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",title = "Tipo de vehiculo")
mytable <- table(datos$Tipo.de.Vehiculo)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Tipo de importador")
prueba <-enframe(mytable,name = "Var1",value="Freq")
barplot(height=prueba$Freq, names=prueba$Var1, col="#69b3a2" , las=2,cex.lab=0.5)
treemap(dtf = prueba,index=c("Var1"),vSize = "Freq",title = "Tipo de importador")
